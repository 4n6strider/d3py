This is d3py: a plotting library for python based on d3. The aim of d3py is to provide a simple way to plot data from the command line or simple scripts into a browser window.

d3py accomplishes this by building on two excellent packages. The first is d3.js, which is a javascript library for creating data driven documents, which allows us to place arbitrary svg into a browser window. The second is the pandas Python module, which blesses Python with (amongst other things) the DataFrame data structure.

The idioms used to plot data are very simple, and borrow from R's ggplot (Hadley Wickham) and Python's matplotlib (John Hunter et al):

1) create a Figure object around a DataFrame
2) add 'geom's to the figure object to plot specific combinations of columns of the data frame. 

Each geom takes as parameters an appropriate number of column names of the data frame as arguments. For example a line, which has two dimensions, takes an x-value and a y-value. A point, which makes up a scatter plot, has three dimensions and so takes three parameters: x, y and colour (in the future it could take size, too!).

Each geom is styled using css which you can pass in arbitrarily. So the point geom comes with a bunch of default colours, but you can also specifiy `fill=red` which will add a custom css line for that set of points which will turn them red. This means you can stlye the plot live in the browser using Firebug in Firefox or Chrome's developer tools.

d3py aims to create really simple source code wherever possible, so you can go in and edit the plots to embed them into your own sites if needs be. The .show() method writes an html file containing the basic markup, a css file with the styles for each geom, a json file with the data from the Figure's DataFrame and a js file with the d3 code in it. The strings that generate the js and css files are always stored in the Figure object so you can see how d3py builds up your graph.

An example session could like:

# some test data
T = 100
df = pandas.DataFrame({
    "time" : range(T),
    "pressure": np.random.rand(T),
    "temp" : np.random.rand(T)
})
# draw, psuedo ggplot style
fig = Figure(df, name="random_temp", width=300, height=300) # instantiates the figure object
fig += Point(x="pressure", y="temp", fill="red") # adds red points
fig.show() # writes 3 files, starts up a server, then draws some beautiful points in Chrome
